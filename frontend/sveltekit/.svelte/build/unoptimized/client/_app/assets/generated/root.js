/* .svelte/assets/generated/root.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	assign,
	check_outros,
	claim_component,
	create_component,
	destroy_component,
	detach,
	empty,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { setContext, afterUpdate } from "../../../web_modules/svelte.js";
import ErrorComponent from "../components/error.js";

function create_else_block(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	const switch_instance_spread_levels = [/*props_1*/ ctx[4] || {}];
	var switch_value = /*components*/ ctx[2][1];

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l(nodes) {
			if (switch_instance) claim_component(switch_instance.$$.fragment, nodes);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = (dirty & /*props_1*/ 16)
			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*props_1*/ ctx[4] || {})])
			: {};

			if (switch_value !== (switch_value = /*components*/ ctx[2][1])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (27:1) {#if error}
function create_if_block(ctx) {
	let errorcomponent;
	let current;

	errorcomponent = new ErrorComponent({
			props: {
				status: /*status*/ ctx[0],
				error: /*error*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(errorcomponent.$$.fragment);
		},
		l(nodes) {
			claim_component(errorcomponent.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(errorcomponent, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const errorcomponent_changes = {};
			if (dirty & /*status*/ 1) errorcomponent_changes.status = /*status*/ ctx[0];
			if (dirty & /*error*/ 2) errorcomponent_changes.error = /*error*/ ctx[1];
			errorcomponent.$set(errorcomponent_changes);
		},
		i(local) {
			if (current) return;
			transition_in(errorcomponent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(errorcomponent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(errorcomponent, detaching);
		}
	};
}

// (26:0) <Layout {...(props_0 || {})}>
function create_default_slot(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*error*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let layout;
	let current;
	const layout_spread_levels = [/*props_0*/ ctx[3] || {}];

	let layout_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < layout_spread_levels.length; i += 1) {
		layout_props = assign(layout_props, layout_spread_levels[i]);
	}

	layout = new /*Layout*/ ctx[5]({ props: layout_props });

	return {
		c() {
			create_component(layout.$$.fragment);
		},
		l(nodes) {
			claim_component(layout.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(layout, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const layout_changes = (dirty & /*props_0*/ 8)
			? get_spread_update(layout_spread_levels, [get_spread_object(/*props_0*/ ctx[3] || {})])
			: {};

			if (dirty & /*$$scope, status, error, components, props_1*/ 279) {
				layout_changes.$$scope = { dirty, ctx };
			}

			layout.$set(layout_changes);
		},
		i(local) {
			if (current) return;
			transition_in(layout.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(layout.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(layout, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { status = undefined } = $$props;
	let { error = undefined } = $$props;
	let { stores } = $$props;
	let { page } = $$props;
	let { components } = $$props;
	let { props_0 = null } = $$props;
	let { props_1 = null } = $$props;
	const Layout = components[0];
	setContext("__svelte__", stores);
	afterUpdate(stores.page.notify);

	$$self.$$set = $$props => {
		if ("status" in $$props) $$invalidate(0, status = $$props.status);
		if ("error" in $$props) $$invalidate(1, error = $$props.error);
		if ("stores" in $$props) $$invalidate(6, stores = $$props.stores);
		if ("page" in $$props) $$invalidate(7, page = $$props.page);
		if ("components" in $$props) $$invalidate(2, components = $$props.components);
		if ("props_0" in $$props) $$invalidate(3, props_0 = $$props.props_0);
		if ("props_1" in $$props) $$invalidate(4, props_1 = $$props.props_1);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*stores, page*/ 192) {
			$: stores.page.set(page);
		}
	};

	return [status, error, components, props_0, props_1, Layout, stores, page];
}

class Root extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			status: 0,
			error: 1,
			stores: 6,
			page: 7,
			components: 2,
			props_0: 3,
			props_1: 4
		});
	}
}

export default Root;
//# sourceMappingURL=root.js.map
